// nf-core modules test circularmapper/realignsamfile
nextflow_process {

    name "Test Process CIRCULARMAPPER_REALIGNSAMFILE"
    tag "modules"
    tag "modules_nfcore"
    tag "circularmapper"
    tag "circularmapper/realignsamfile"
    tag "circularmapper/circulargenerator"
    tag "bwa"
    tag "bwa/sampe"
    tag "bwa/aln"
    tag "bwa/index"
    script "../main.nf"
    process "CIRCULARMAPPER_REALIGNSAMFILE"
    config "./nextflow.config"

    test("sarscov2") {

        setup{
            run("CIRCULARMAPPER_CIRCULARGENERATOR") {
                script "../../../../../modules/nf-core/circularmapper/circulargenerator/main.nf"
                process {
                    """
                    input[0] = [
                            [ id:'test' ],
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
            run("BWA_INDEX") {
                script "../../../../../modules/nf-core/bwa/index/main.nf"
                process {
                    """
                    input[0] = CIRCULARMAPPER_CIRCULARGENERATOR.out.fasta
                    """
                }
            }
            run("BWA_ALN") {
                script "../../../../../modules/nf-core/bwa/aln/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:true ], // meta map
                        [
                            file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                        ]
                    ]
                    input[1] = BWA_INDEX.out.index
                    """
                }
            }
            run("BWA_SAMPE") {
                script "../../../../../modules/nf-core/bwa/sampe/main.nf"
                process {
                    """
                    input[0] = Channel
                    .fromList(
                        [
                            [ id:'test', single_end:false ],
                            [
                                file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                                file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                            ]
                        ]
                    )
                    .collect()
                    .join(BWA_ALN.out.sai)
                    input[1] = BWA_INDEX.out.index
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = BWA_SAMPE.out.bam
                input[1] = CIRCULARMAPPER_CIRCULARGENERATOR.out.fasta
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}

